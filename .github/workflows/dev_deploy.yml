name: Develop Deploy

on:
  push:
    branches:
      - develop
jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # GitHub 저장소에서 코드 가져오기
      - name: Checkout code
        uses: actions/checkout@v4
        
     # JDK 21
      - name: Set up JDK 21
        uses: actions/setup-java@v4.5.0
        with:
          java-version: '21'
          distribution: 'temurin'
  
      # gradle wrapper 파일 실행 권한 부여 
      - name: Grant execute permission for gradlew
        run: chmod +x gradlew
  
      # Gradle 빌드 엑션을 이용해서 프로젝트 빌드
      - name: Build with Gradle
        uses: gradle/gradle-build-action@v3.5.0
        with:
          arguments: build -x test

      # EC2에 배포하기 위한 파일 준비
      - name: Prepare artifact
        uses: actions/upload-artifact@v4
        with:
          name: momokddi_back_dev
          path: build
        
  deploy:
      runs-on: ubuntu-latest
      needs: build
  
      steps:
        # 위의 빌드작업한 JAR 파일 = 아티팩트를 다운로드
        - name: Download build artifact
          uses: actions/download-artifact@v4
          with:
            name: momokddi_back_dev
            
        # EC2 서버로 빌드된 파일을 업로드
        - name: Deploy to EC2
          run: |
            printf "%s" "${{ secrets.EC2_SSH_KEY }}" > private_key.pem
            chmod 600 private_key.pem
            scp -i private_key.pem -o StrictHostKeyChecking=no -r /home/runner/work/momokddi_back/momokddi_back/libs/*.jar ${{ secrets.EC2_USERNAME }}@${{ secrets.EC2_HOST }}:/home/${{ secrets.EC2_USERNAME }}/back
            
        # SSH로 EC2에 접속하여 웹 서버 재시작 (예: Nginx)
        - name: Restart API Server
          run: |
            ssh -o StrictHostKeyChecking=no -i private_key.pem ${{ secrets.EC2_USERNAME }}@${{ secrets.EC2_HOST }} << 'EOF'
              sudo mv -f -r /home/${{ secrets.EC2_USERNAME }}/back/* /www/dev/api/
              sudo systemctl restart dev-api
            EOF
            rm -f private_key.pem
